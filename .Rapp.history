###############################################
# This script create has the goal of showing the impact of various population distributions#
# and stressor frequencies on the population average#
###############################################
#
rm(list = ls()) #clear the environment#
#
######## 0.1 DEFINE PARAMETERS VARYING BETWEEN SIMULATIONS #########
#
#****USER INSTR.: CHANGE HERE THE PARAMETERS THAT VARY BETWEEN SIMULATIONS****##
#
paramsets <- list(#
  list(#simulation 1#
  #   wakefM = 8, #per day#
  #   dshape.wake = 1.2,#
  #   anticipation = c("YES","NO")[1],#
  #   stressfM = 6, #per 8h#
  #   dshape.stress = 3#
  # ),list(#simulation 2#
    wakefM = 14, #per day#
    dshape.wake = 2.5,#
    anticipation = c("YES","NO")[2],#
    stressfM = 6, #per 8h#
    dshape.stress = 3#
  ),list(#simulation 2#
    wakefM = 14, #per day#
    dshape.wake = 3,#
    anticipation = c("YES","NO")[2],#
    stressfM = 6, #per 8h#
    dshape.stress = 3#
  # ),list(#simulation 2#
  #   wakefM = 8, #per day#
  #   dshape.wake = 1.1,#
  #   anticipation = c("YES","NO")[1],#
  #   stressfM = 6, #per 8h#
  #   dshape.stress = 2#
    )#
)#
#
######## 0.2 DEFINE DEFAULT SETTINGS #########
#
#****USER INSTR.: SET HERE THE PARAMETERS AS THEY OCCUR FOR ALL SIMULATIONS****##
#
defaults <- list( #initialize list#
  ## simulation settings#
  fs = 2, #samples per hour#
  days = 2,#
  people = 1000,#
  integration = "RK4",#
  #awakening impulse#
  wakefM = 3, #per day#
  dshape.wake = 2,#
  waketime = 7,#
  nightgrowxp = 1,#exponential growth factor #
  #work stressors#
  stressfM = 3, #per 8h#
  dshape.stress = 2,#
  worktime = c(9,17),#
  anticipation = c("YES","NO")[1],#
  dayoff = c(0,6), #from 0-6: 'Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'#
  ## physiological parameters#
  delay = .5,#
  kHPA = NA, #set to NA to have to code determine the scaling factor#
  halftimeM = 80/60, #half time of cortisol is 80 minutes or 4/3hour#
  halftimeSD = 8/60 #between person variation#
)#
#
#### 1 LOAD PACKAGES & SET DIRECTORY ######
#
start.time = Sys.time()#
#
#function to load a library and install it when it is not yet installed#
package <- function(pack) { #function to load a library and install it when it is not yet installed#
  if (!as.character(pack) %in% installed.packages()) {install.packages(as.character(pack)) }#
  library(pack,character.only=TRUE)}#
#
package("lattice")#
package("plyr")#
package("dplyr")#
package("tidyr")#
package("ggplot2")#
package("tcltk")#
package("car")#
package("rmarkdown")#
package("knitr")#
#checks if a dedicated data output folder is available in the working directory and, if not, ask the user to define the directory#
winDir <- "D/Surfdrive/BS28A - Major project/simulations"#
macDir <- "/Users/remcobenthemdegrave/surfdrive/BS28A - Major project/simulations"#
if (file.exists(winDir)){setwd(winDir)}; if (file.exists(macDir)){setwd(macDir)}; #
if (!file.exists("simoutput")){setwd(tk_choose.dir(getwd(), "Choose folder for storing simulation data"))#
  if (!file.exists("simoutput")){dir.create("simoutput")}} #
#
#define data storage locations#
if(length(paramsets)<2){#
  datadir=file.path("simoutput",paste0("profile", format(Sys.time(),"%Y-%m-%d.%Hh%M")))#
}else{#
  compdir<-file.path("simoutput",paste0("profiles", format(Sys.time(),"%Y-%m-%d.%Hh%M")))#
  datadir<-file.path(compdir,paste0("sim",seq(length(paramsets))))#
  dir.create(compdir)#
}#
#
##### 3 DEFINE EMBEDDED FUNCTIONS ######
#
#### 3.1 CALCULATE CORTISOL & ALLOSTATIC LOAD #####
HPAA <- function(HPA, fs, delay, halftime, integration = c("Euler", "RK4")[1]){#
  #HPA is the vector that describes cortisol production by the HPA-axis#
  #dt (=1/fs) is the time interval between samples#
  #halftime is the cortisol half-time#
  #!! note: make sure that dt and halftime are given in the same unit, e.g. h#
  #calculate decay rate#
  #standard decay function: dY/dt = Y*r (decay is a function of the current concentration)#
  #one can rewrite this as: dY/Y = r*dt. Integrating over time gives ln(Y(t))-ln(Y(0)) = r*t or Y(t)/Y(0) = exp(r*t) or Y(t) = Y(0)*exp(r*t)#
  #filling in: Y(t=1/2) = 1/2*Y(0) = Y(0)*exp(r*t_halftime) or -ln(2) = r*t_halftime or r = -ln(2)/t_halftime#
  r <- -log(2)/halftime#
  #calculate Y[t+1] from dY/dt = Y*r and additional input (cortisol produced by the HPA axis)#
  #dY/dt = Y*r + input or dY = (Y*r + input)*dt.#
  #this can be integrated numerically using Euler: Y[t+1] = (Y[t]*r + input[t])*dt + Y[t], but also using RK4 (see below)#
  #first introduce the delay between the impulses to the HPAA and its cortisol output (for practical reasons, we do this outside the formula below)#
  HPAout <- c(rep(0,round(delay*fs)),HPA[1:(length(HPA)-round(delay*fs))]) ##
#
  #initiate array and add values start values (last values of the previous day)#
  N <- length(HPAout)#
  C <- as.numeric(c(0, rep(NA,N-1))) #initialize#
#
  #calculate cortisol values#
  switch(integration,#
         "Euler" =    # Euler numerical integration#
           sapply(seq_along(C), function(t) C[[t+1]] <<- Euler(Y1 = as.numeric(C[t]), func = lingrowth, param = c(r, HPAout[t]), h = 1/fs)),#
         "RK4" =   # Runge-Kutta 4th Order Integration#
           sapply(seq_along(C), function(t) C[[t+1]] <<- RK4(Y1 = as.numeric(C[t]), func = lingrowth, param = c(r, HPAout[t]), h = 1/fs)))#
  return(C)#
}#
#
#### 3.2 Euler integration #####
Euler <- function(Y1, func, param, h){#
  ## This function performs one iteration using the Euler Integration#
  # Iterative process#
  Y2 <- Y1 + func(Y1, param)*h#
  return(Y2)#
}#
#
#### 3.3 Runge-Kutta 4th Order Integration #####
RK4 <- function(Y1, func, param, h){#
  ## This function performs one iteration using the Runge-Kutta 4th Order Integration#
  k1 <- func(Y1, param)#
  k2 <- func(Y1 + 1/2*h*k1, param)#
  k3 <- func(Y1 + 1/2*h*k2, param)#
  k4 <- func(Y1 + h*k3, param)#
  # Iterative process#
  Y2 <- Y1 + (1/6)*h*(k1+2*k2+2*k3+k4)#
  return(Y2)#
}#
#
#### 3.4 Linear growth (used in Euler and RK4 functions) #####
#This function performs one iteration of linear growth#
lingrowth <- function(Y1,param){#
  r <- param[1]; input <- param[2]#
  Y2 <- as.numeric(Y1)*as.numeric(r) + as.numeric(input)#
  return(as.numeric(Y2))#
}#
#
#### 3.6 create day HPA activity #####
#this function creates a vector with probability values that HPA activity will occur at any possible sample#
makeHPA <- function(day, fwake, fstress, settings,n){#
  wordayfactor <- (settings$worktime[[2]]-settings$worktime[[1]])/8 #corrects in the workstressors for longer or shorter working days#
  set.seed(n)#
  if((day - floor(day/7)*7) %in% settings$dayoff) #for non-working days there is only night time HPA activity#
  {set.seed(n); spikes <- abs(-rexp(fwake, rate = settings$nightgrowxp) + settings$waketime)#
  }else{ #for working days, there is also HPA activity during work time#
    spikes <- switch(settings$anticipation,#
                     NO = c(abs(-rexp(fwake, rate = settings$nightgrowxp) + settings$waketime),#
                            runif(fstress*wordayfactor,min = settings$worktime[[1]], max = settings$worktime[[2]])),#
                     YES = c(abs(-rexp(fwake+fstress*wordayfactor, rate = settings$nightgrowxp) + settings$waketime),#
                             runif(fstress*wordayfactor,min = settings$worktime[[1]], max = settings$worktime[[2]])))#
  }#
  spikes <- ceiling(spikes*settings$fs) #corresponding sample moments of the spikes (and prevent spikes at time point 0)#
  HPA<-rep(0, settings$fs*24)#
  HPA[unique(spikes)]<-sapply(unique(spikes), function(spike) sum(spikes==spike))#
  return(HPA)#
}#
#
## 3.7 executing the simulation per person #####
dosim <- function(settings, simperson, n, subDir){   #
  ## creating HPA activity#
  #determine the number of impulses that the simulated fictive individual experiences on a particular day#
  set.seed(n)#
  fwake <- rpois(settings$days, simperson$wakefM_pp)#
  set.seed(n+1e6)#
  fstress <- rpois(settings$days, simperson$stressfM_pp)#
  #create a vector with probability values that HPA activity will occur at any possible sample#
  HPA <- stack(as.data.frame(sapply(seq(settings$days), function(day) makeHPA(day, fwake[day], fstress[day], settings,n=n+simperson$simperson*day))))[,1]#
  ## calculate cortisol#
  return(HPAA(HPA, settings$fs, settings$delay, simperson$halftime_pp, settings$integration))#
}#
######## 2 EXECUTION FUNCTION #########
#
exesim <- function(paramset,defaults,subDir){#
#
  #### 2.1 Initialization steps #####
  ## time stamp the start of the script execution, so we can determine how long the whole thing took#
  start.time <- Sys.time()#
  n <- 1 #seed counter; everytime a random number is drawn, the next random number is drawn using a new seed, but every execution of this script causes the same random numbers to be used#
  ######## 2.2.2 DEFINE SETTINGS FROM PROVIDED PARAMETERS AND DEFAUTLS #########
  #define the settings#
  settings <- sapply(names(defaults), function(param) ifelse(param %in% names(paramset),paramset[param],defaults[param]))#
  #### 2.3 Create individuals #####
  #create data frame to store all information about individuals#
  simpopulation <- data.frame(simperson = seq(settings$people) )#
  ## parameters that determine the cortisol profile#
  ##Cortisol decay#
  set.seed(n); n=n+1; simpopulation$halftime_pp <- abs( rnorm(settings$people, mean = settings$halftimeM, sd = settings$halftimeSD) )#
  ##number of awakening impulses (indivual mean)#
  set.seed(n); n=n+1; #
  simpopulation$wakefM_pp <- rgamma(settings$people, shape = settings$dshape.wake, rate = settings$dshape.wake/settings$wakefM)#
#
  ##number of stress stressors (indivual mean)#
  set.seed(n); n=n+1; #
  simpopulation$stressfM_pp <- rgamma(settings$people, shape = settings$dshape.stress, rate = settings$dshape.stress/settings$stressfM)#
  #### 2.4 Prepare for file saving #####
  simlog <- list(preptime=NULL, simtime = NULL) #create a data frame for logging information about the simulation#
  simlog$preptime <-  difftime(Sys.time(), start.time, unit="mins")#
#
  #create folders for storing data#
  dir.create(subDir)#
#
  #### 2.5 Simulate #### #
  #perform the simulation per person and return several evaluation values#
  Qdata <- as.data.frame(sapply(seq(settings$people), function(id) dosim(settings = settings, simperson = simpopulation[id,], n = n+id, subDir = subDir)))#
  Qdata <- cbind(time=seq(0,24*settings$days,1/settings$fs),Qdata)#
  Qdata <- gather(Qdata, key = person, value = C, -time) #long data#
  simlog$simtime <- difftime(Sys.time(), start.time, unit="mins")#
  ################################### 2.6 STORE DATA ####################################
  save(settings, file = file.path(getwd(), subDir, "settings.RData"))#
  save(simlog, file = file.path(getwd(), subDir, "simlog.RData"))#
  save(simpopulation, file = file.path(getwd(), subDir, "simpopulation.RData"))#
  save(Qdata, file = file.path(getwd(), subDir, "Qdata.RData"))#
}#
#
#### 4 RUN THE SIMULATION FOR THE GIVEN PARAMETER SETS #####
#
start.time<-Sys.time()#
#
l_ply(seq(length(paramsets)), function(i) exesim(paramsets[[i]],defaults,datadir[i]))#
#
difftime(Sys.time(), start.time, unit="mins")#
#
################################### 2.7 MAKE CURVES  ####################################
#
if(length(datadir)>1){  #
  save(paramsets, file = file.path(compdir, "paramsets.RData"))#
  save(datadir, file = file.path(compdir, "datadir.RData")) #
  render("makeprofiles.Rmd",output_file = paste0(compdir,".html"),params = list(datadir = datadir, paramsets=paramsets))#
} else {render("makeprofiles.Rmd",output_file = paste0(datadir,".html"),params = list(datadir = datadir, paramsets=paramsets))}
?rmarkdown::pandoc_available
package pandoc
package(pandoc)
package("pandoc")
---#
title: "Simulation output"#
author: "Remco Benthem de Grave"#
output: #
  html_document:#
    fig_width: 9#
    fig_height: 6#
params:#
   datadir: ""#
   paramsets: ""#
   totalsimtime: ""#
---#
```{r setup, include=FALSE}#
knitr::opts_chunk$set(echo = TRUE)#
```#
#
```{r, include = FALSE}#
#make time stamp for later calculation of rendering time#
start.time <- Sys.time()#
#
#load libraries#
#
#function to load a library and install it when it is not yet installed#
package <- function(pack) { #function to load a library and install it when it is not yet installed#
  if (!pack %in% installed.packages()) {install.packages(pack) }#
  library(pack,character.only=TRUE)}#
#
package("ggplot2")#
package("plyr")#
package("dplyr")#
package("tidyr")#
package("tcltk")#
package("ggthemes")#
package("knitr")#
# package("devtools")#
# if (!"patchwork" %in% installed.packages()) {devtools::install_github("thomasp85/patchwork")}; library('patchwork')#
#
# Multiple plot function#
##
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)#
# - cols:   Number of columns in layout#
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.#
##
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),#
# then plot 1 will go in the upper left, 2 will go in the upper right, and#
# 3 will go all the way across the bottom.#
##
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {#
  library(grid)#
#
  # Make a list from the ... arguments and plotlist#
  plots <- c(list(...), plotlist)#
#
  numPlots = length(plots)#
#
  # If layout is NULL, then use 'cols' to determine layout#
  if (is.null(layout)) {#
    # Make the panel#
    # ncol: Number of columns of plots#
    # nrow: Number of rows needed, calculated from # of cols#
    layout <- t(matrix(seq(1, cols * ceiling(numPlots/cols)),#
                    ncol = ceiling(numPlots/cols), nrow = cols))#
  }#
#
 if (numPlots==1) {#
    print(plots[[1]])#
#
  } else {#
    # Set up the page#
    grid.newpage()#
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))#
#
    # Make each plot, in the correct location#
    for (i in 1:numPlots) {#
      # Get the i,j matrix positions of the regions that contain this subplot#
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))#
#
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,#
                                      layout.pos.col = matchidx$col))#
    }#
  }#
}#
```#
#
```{r, include = FALSE, warning = FALSE}#
if(!exists("datadir")){#
  choicedir<-tk_choose.dir(getwd(), "Show folder with data to publish")#
  if(file.exists(file.path(choicedir,"datadir.RData"))){load(file.path(choicedir,"datadir.RData"));load(file.path(choicedir,"paramsets.Rdata"))}else{datadir<-choicedir; paramsets<-NULL}#
}#
if(!exists("paramsets")){paramsets<-NULL}#
```#
#
##### Included simulations#
```{r, echo = FALSE, warning = FALSE, results='asis'}#
shortdatadir <- function(ddir){#
  ddira <- unlist(strsplit(ddir, "/"))#
  return(paste(ddira[which(ddira=="simoutput"):length(ddira)],collapse = "/"))}#
kable(unlist(lapply(datadir, function(ddir) shortdatadir(ddir))))#
```#
#
##### Variation between simulations#
```{r, echo = FALSE, warning = FALSE, results='asis'}#
if(length(datadir)>1){#
    repl <- function(paramset){#
    #function to reshape the parameter list into something printable by kable#
     if("dayoff" %in% names(paramset)){#
       paramset$dayoff=unlist(paramset$dayoff)#
       paramset$dayoff=(paste(as.character(#
             factor(unique(paramset$dayoff%%7), levels=c(0,1,2,3,4,5,6), labels=c('Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday')#
             )), collapse = " "))}#
    if("waketime" %in% names(paramset)){#
      paramset$waketime=#
        with(paramset, paste0(floor(waketime),':',sprintf("%02d", round(waketime[1]%%1*60))))}#
    if("worktime" %in% names(paramset)){#
      paramset$worktime=unlist(paramset$worktime)#
      paramset$worktime=#
        with(paramset, paste0(floor(worktime[1]),':',sprintf("%02d", round(worktime[1]%%1*60)),' to ',floor(worktime[2]),':',sprintf("%02d", round(worktime[2]%%1*60))))}#
    if("savedays" %in% names(paramset)){#
      paramset$savedays=paste(settingsfortable$savedays, collapse = " ")}#
    if("samplepeople" %in% names(paramset)){#
      paramset$samplepeople=paste(settingsfortable$samplepeople, collapse = " ")}#
    return(as.data.frame(paramset))#
  }#
  # kable(#
  # t(matrix(#
  #   unlist(lapply(paramsets, function(pset) repl(pset))),nrow=length(names(paramsets[[1]]))#
  #   ,dimnames = list(names(paramsets[[1]]),paste("sim",seq_along(paramsets)))))#
  # )#
  paramssetsshow=repl(paramsets[[1]])#
  for(i in 2:length(paramsets)){paramssetsshow<-rbind(paramssetsshow,repl(paramsets[[i]]))}#
  row.names(paramssetsshow)= paste("sim",seq_along(paramsets))#
  kable(paramssetsshow)#
#
}#
```#
#
##### Other settings (identical between the simulations):#
```{r, echo = FALSE, warning=FALSE}#
#create a displayable version of settings#
load(file.path(datadir[1],"settings.Rdata"))#
settingsfortable <- settings#
#
#first conversion of parameter names in some older versions#
settingsfortable$dayoff<-paste(as.character(factor(unique(settingsfortable$dayoff%%7), levels=c(0,1,2,3,4,5,6), labels=c('Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'))), collapse = " ")#
#
settingsfortable$halftimeM<-paste0(round(settingsfortable$halftimeM,digits = 3))#
#
settingsfortable$halftimeSD<-paste0(round(settingsfortable$halftimeSD,digits = 3))#
#
settingsfortable$delay<-paste0(round(settingsfortable$delay,digits = 3))#
#
settingsfortable$waketime<-with(settingsfortable, paste0(floor(waketime),':',sprintf("%02d", round(waketime[1]%%1*60))))#
settingsfortable$worktime<-with(settingsfortable, paste0(floor(worktime[1]),':',sprintf("%02d", round(worktime[1]%%1*60)),' to ',floor(worktime[2]),':',sprintf("%02d", round(worktime[2]%%1*60))))#
#
settingsfortable$kHPA<-paste0(round(settingsfortable$kHPA,digits = 3))#
#
names(settingsfortable) <-  c(#
  "samples.per.hour",#
  "days",#
  "people",#
  "integration.method",#
  'nighttime.HPA.axis.impulses.population.mean',#
  'shape.population.distribution.nighttime.HPA.axis.impulses',#
  "time.of.awakening",#
  "delay.hour",#
  "factor.of.exponential.growth.factor.of.night.HPA.axis.activity",#
  'worktime.HPA.axis.impulses.population.mean',#
  'shape.population.distribution.nighttime.HPA.axis.impulses',#
  "worktime",#
  "day.stress.anticipation",#
  "off.days",#
  "HPA.scaling.factor",#
  "cortisol.halftime.M.hour", #
  "cortisol.halftime.SD.hour")#
#
if(length(datadir)>1){settingsfortable <- settingsfortable[-which(names(settings) %in% names(paramsets[[1]]))]} #remove parameters that are varied between simulations#
#
settingsfortable<-t(as.data.frame(settingsfortable)); colnames(settingsfortable)=c('defaults')#
#
kable(settingsfortable)#
```#
#
#### Actual distribution of night- and worktime HPA-axis impulses:#
```{r, echo = FALSE, warning = FALSE}#
#### show population distribution on wake impulses and stress impulses #####
#
densgraph <- function(ddir){#
  #function that creates a density plot of the wake and stressor frequencies#
  load(file.path(ddir,"simpopulation.Rdata"))#
  load(file.path(ddir,"settings.Rdata"))#
#
  if(settings$anticipation=='YES'){#
    simpopulation$wakefM_pp_total <- simpopulation$wakefM_pp + simpopulation$stressfM_pp#
    simpopulation <- gather(simpopulation[,-c(1,2)],key = impulsetype, value = freq)#
    simpopulation$impulsetype <- factor(simpopulation$impulsetype, #
        levels = c("wakefM_pp","stressfM_pp","wakefM_pp_total"),#
        labels = c("night stressors (uncorrelated)","work stressors","night stressors (all)"))#
  }else{simpopulation <- gather(simpopulation[,c(3,4)],key = impulsetype, value = freq)#
  simpopulation$impulsetype <- factor(simpopulation$impulsetype, levels = c("wakefM_pp","stressfM_pp"),#
                                      labels = c("night stressors (uncorrelated)","work stressors"))#
  }#
  Mw = round(mean(simpopulation$freq[which(simpopulation$impulsetype=="night stressors (uncorrelated)")]), digits = 1)#
  Ms = round(mean(simpopulation$freq[which(simpopulation$impulsetype=="work stressors")]), digits = 1)#
  SDw = round(sd(simpopulation$freq[which(simpopulation$impulsetype=="night stressors (uncorrelated)")]), digits = 1)#
  SDs = round(sd(simpopulation$freq[which(simpopulation$impulsetype=="work stressors")]), digits = 1)#
  Medw = round(median(simpopulation$freq[which(simpopulation$impulsetype=="night stressors (uncorrelated)")]), digits = 1)#
  Meds = round(median(simpopulation$freq[which(simpopulation$impulsetype=="work stressors")]), digits = 1)#
  p <- ggplot(simpopulation, aes(freq,color=impulsetype,fill=impulsetype)) + geom_density(alpha=0.55) + #
    labs(title=paste0("Median(SD), wake: ",Medw,"(",SDw,")"," stress: ",Meds,"(",SDs,")"),x="impulse frequency") + #
    theme_bw() + theme(plot.title = element_text(size=10), legend.position=c(.8, .8))#
  return(p)#
}#
#
#obtain desity graphs for all simulations if there is any variation in the number of impulses#
if(sum(c("wakefM","wakefSD","stressfM","stressfSD") %in% names(unlist(paramsets)))>0){#
  graphs<-lapply(datadir, function(i) densgraph(i))#
  }else{graphs<-list(densgraph(datadir[1]))} #otherwise only show the density for one of the simulations#
#
e=4 #start a new multiplot frame after each 4 plots#
l_ply(seq(1,length(graphs),e), function(i) #
  multiplot(plotlist = graphs[i:ifelse(i+e-1<length(graphs),i+e-1,length(graphs))], cols = 2))#
```#
##### Cohort data Miller et al. (2017).#
![](Millergraph.png)#
#
```{r, echo = FALSE, warning = FALSE}#
#create average cortisol profile since awakening#
#
makeQgraph <- function(ddir){#first create plot of quantiles since awakening, as in Miller et al.#
  rm(Qdata)#
  rm(settings)#
  rm(simlog)#
  #read data#
  load(file.path(ddir,"Qdata.Rdata"))#
  load(file.path(ddir,"settings.Rdata"))#
  load(file.path(ddir,"simlog.Rdata"))#
  #calculate quantiles in data#
  Qdata <- Qdata %>% group_by(time) %>% summarise(#
    Q10=quantile(C,probs=.10),#
    Q25=quantile(C,probs=.25),#
    Q50=quantile(C,probs=.50),#
    Q75=quantile(C,probs=.75),#
    Q90=quantile(C,probs=.90))#
  simlog$kHPA<-settings$kHPA<-8.209/(max(Qdata$Q50))#
  save(settings, file = file.path(ddir,"settings.Rdata"))#
  save(simlog, file = file.path(ddir, "simlog.RData"))#
  #reshape to long data frame for ggplot#
  Qdata <- gather(Qdata, key=quantile, value=cortisol, -time)#
  #scale to level of Miller#
  Qdata$cortisol<-Qdata$cortisol*settings$kHPA#
   #plot profiles since awakening#
  pa<- ggplot(subset(Qdata, time>=settings$waketime), aes(x=time-settings$waketime,y=cortisol,group=quantile)) + #
  geom_line(aes(linetype=quantile)) + #
    scale_linetype_manual(values=c("dotted","twodash","solid","twodash","dotted"),#
                          name="Percentile",#
                          breaks=c("Q90", "Q75", "Q50", "Q25", "Q10"),#
                          labels=c("90th", "75th", "50th", "25th", "10th")) +#
    scale_x_continuous(breaks=seq(0, 20, 2)) +#
    labs(x="time since awakening", y="simulated cortisol [arbitrary units]") +#
    theme_minimal() + theme(legend.justification=c(1,1), legend.position=c(1,1), panel.grid.minor.x=element_blank(), panel.grid.minor.y=element_blank()) +#
    coord_cartesian(xlim=c(0,20) ,ylim=c(0, 19))#
  # #plot profiles since awakening#
  # pa<- ggplot(subset(Qdata, time>=settings$waketime & time<= settings$waketime+21), aes(x=time-settings$waketime,y=cortisol,group=quantile)) + #
  #   geom_line(aes(linetype=quantile)) + #
  #   scale_linetype_manual(values=c("dotted","twodash","solid","twodash","dotted")) +#
  #   scale_x_continuous(breaks=seq(0, 20, 2)) +#
  #   labs(title=paste0("f-wake=",settings$wakefM,", f-stress=",settings$stressfM),x="time since awakening", y="simulated cortisol [arbitrary units]") +#
  #   expand_limits(x=c(0,20),y=c(0,19)) +#
  #   theme_bw() + #
  #   theme(legend.position="none")#
  # #
  #plot the whole profiles#
  pt<-ggplot(Qdata, aes(x=time,y=cortisol,group=quantile)) + #
    geom_line(aes(linetype=quantile)) + #
    scale_linetype_manual(values=c("dotted","twodash","solid","twodash","dotted")) +#
    labs(title=paste0("f-wake=",settings$wakefM,", f-stress=",settings$stressfM),x="time", y="simulated cortisol [arbitrary units]") +#
    theme_bw() + theme(legend.position="none")#
  ## plot profiles until 3h after awakening#
  #reload the data#
  rm(Qdata); load(file.path(ddir,"Qdata.Rdata"))#
  Qdata$C<-Qdata$C*settings$kHPA#
#
  #calculate mean and standard 95%-CI of the group data#
  nightdata <- data.frame(#
    time = unique(Qdata$time),#
    M = sapply(unique(Qdata$time), function(t) mean(Qdata$C[which(Qdata$time==t)])),#
    SE = sapply(unique(Qdata$time), function(t) sd(Qdata$C[which(Qdata$time==t)])/sqrt(settings$people)))#
#
  pn<-ggplot(subset(nightdata, time<=settings$waketime+3 & time>=settings$waketime-6),  aes(x=time,y=M,ymin=M-2*SE,ymax=M+2*SE)) + #
    geom_line() + #
    geom_ribbon(alpha=0.2) +#
    geom_vline(xintercept = 7, linetype=2, color="grey") +#
    coord_cartesian(xlim=c(settings$waketime-6,settings$waketime+4) ,ylim=c(0,12.5)) +#
    scale_x_continuous(breaks=seq(1, 11, 2)) +#
    scale_y_continuous(breaks=seq(0, 12, 2)) +#
    labs(x="time", y="Simulated cortisol [arbitrary units]") +#
    theme_minimal() + theme(legend.position="none", panel.grid.minor.x=element_blank(), panel.grid.minor.y=element_blank())#
  # pn<-ggplot(subset(Qdata, time<=settings$waketime+3 & time>=settings$waketime-6 & quantile %in% c("Q10","Q50","Q90")),  aes(x=time+(6-settings$waketime),y=cortisol,group=quantile)) + #
  #   geom_line(aes(linetype=quantile)) + #
  #   scale_linetype_manual(values=c("dotted","solid","dotted")) +#
  #   geom_vline(xintercept = 6, linetype = 2) +#
  #   scale_x_continuous(breaks=seq(0, 9, 1)) +#
  #   labs(title=paste0("f-wake=",settings$wakefM,", f-stress=",settings$stressfM),x="time", y="simulated cortisol [arbitrary units]") +#
  #   theme_bw() + theme(legend.position="none")#
  return(list(pa=pa,pt=pt,pn=pn))#
}#
#
#makegraphs#
graphs<-sapply(datadir, function(i) makeQgraph(i))#
#restructure the 3 different graph types in sub-lists #
graphs<-lapply(seq(3), function(i) graphs[seq(i,length(graphs),3)])#
```#
#
##### Average cortisol profiles since awakening#
#
```{r, echo = FALSE, warning = FALSE}#
#multiplot(plotlist = graphs[[1]],cols = 3)#
e=1 #start a new multiplot frame after each 4 plots#
cols = 1 #number of graphs next to one another#
l_ply(seq(1,length(graphs[[1]]),e), function(i)#
  multiplot(plotlist = graphs[[1]][i:ifelse(i+e-1<length(graphs[[1]]),i+e-1,length(graphs[[1]]))], cols = cols))#
```#
#
##### Night time cortisol profiles Clow et al. (2009).#
![](night_cortisol_clow.png)#
#
##### Average nighttime cortisol profiles#
#
```{r, echo = FALSE, warning = FALSE}#
#multiplot(plotlist = graphs[[3]],cols = 1)#
e=1 #start a new multiplot frame after each 4 plots#
l_ply(seq(1,length(graphs[[3]]),e), function(i) #
  multiplot(plotlist = graphs[[3]][i:ifelse(i+e-1<length(graphs[[3]]),i+e-1,length(graphs[[3]]))], cols = 1))#
```#
#
##Appendix#
#
```{r, echo = FALSE, warning = FALSE}#
#
sampleplots <- function(ddir){#
  rm(Qdata)#
  rm(settings)#
#
  #read data#
  load(file.path(ddir,"Qdata.Rdata"))#
  load(file.path(ddir,"settings.Rdata"))#
#
  #randomly pick some people to plot#
  set.seed(2)#
  Qdata=Qdata[which(Qdata$person %in% sample(unique(Qdata$person),10)),]#
  #scale cortisol values as done for the profile graphs of the group averages #
  Qdata$C<-Qdata$C*settings$kHPA#
  #change description of the persons#
  Qdata$person <- gsub("V", "person ", Qdata$person)#
  Qdata$person <- factor(Qdata$person)#
  ##
  pp <- ggplot(subset(Qdata, time <= 24), aes(x=time, y=C, group = person)) +#
    geom_line() + facet_wrap(~ person, ncol = 2) +#
    labs(x="time [hours]", y=expression("Simulated cortisol [arbitrary units]")) +#
    theme_minimal() + theme(panel.grid.minor.x=element_blank(), panel.grid.minor.y=element_blank())#
    scale_x_continuous(breaks=seq(0, 24, 4)) #
  #plot individual cortisol profiles of only the first day for comparison with Hosseinichimeh 2015#
  individual <- function(data){#
    ggplot(subset(data, time <= 24), aes(x=time, y=C)) + geom_line() + #
    scale_x_continuous(breaks=seq(0, 24, 4)) +#
    ylab("Simulated cortisol") + xlab("time [hours]") +#
    theme_minimal() + theme(panel.grid.minor.x=element_blank(), panel.grid.minor.y=element_blank())#
#
  }#
  graphs <- lapply(unique(Qdata$person), function(person) individual(Qdata[which(Qdata$person == person),]))#
#
  return(graphs)#
}#
#
#get plots#
#graphs<-lapply(datadir, function(i) sampleplots(i))#
```#
#
##### 24h cortisol profiles of 17 individuals from Hosseinichimeh et al. (2015).#
![](individuals-hosseinichimeh.png)#
#
##### 24h cortisol profiles from 5 randomly selected people#
```{r, echo = FALSE, message = FALSE, warning = FALSE}#
#
l_ply(datadir, function(i) multiplot(plotlist = sampleplots(i), cols = 4))#
# #multiplot(plotlist = graphs[[5]],cols = 1)#
# e=4 #start a new multiplot frame after each 4 plots#
# l_ply(seq(1,length(graphs),e), function(i) #
#   multiplot(plotlist = graphs[i:ifelse(i+e-1<length(graphs),i+e-1,length(graphs))], cols = 1))#
```#
#
##### Evaluations:#
```{r, echo = FALSE}#
logsim <- function(ddir){#
  load(file.path(ddir,"simlog.Rdata"))#
  simlog<-as.data.frame(simlog)#
  #simlog[,c(1:3)] <- paste(round(as.numeric(simlog[,c(1:3)]), digits = 3),'min')#
  return(simlog)}#
#
simlogs<-logsim(datadir[1])#
if(length(datadir)>1){for(i in 2:length(datadir)){simlogs<-rbind(simlogs,logsim(datadir[i]))}}#
row.names(simlogs)= paste("sim",seq_along(datadir))#
kable(simlogs)#
```
