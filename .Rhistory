# Chi_sq; chidf; chisq.prob
#
# #model fit by R2
# R2.hl<-Chi_sq/odds_model$null.deviance
# R.cs<-1-exp((odds_model$deviance-odds_model$null.deviance)/nrow(odds.data))
# R.n<-R.cs/(1-(exp(-(odds_model$null.deviance/nrow(odds.data)))))
# R2.hl; R.cs; R.n
}
# IF ELASTICITY CONSTANT, ALLOSTATIC LOAD THRESHOLD AND DISEASE THRESHOLD WERE VARIED BETWEEN SIMULATIONS - CREATE GRID GRAPH SHOWING RISK OF DISEASE FOR DIFFERENT FREQUENCIES OF WORK STRESSORS UNDER THE VARYING ARBITRARY PARAMETER CHOISES OF THE ELASTICITY CONSTANT, ALLOSTATIC LOAD THRESHOLD AND DISEASE THRESHOLD
if(length(datadir)>1 & sum(c('rho.E','eps.A','eps.D') %in% names(paramsets[[1]]))==3){
#function to get the odds per day in the simulation
getodds <- function(data){
if(length(unique(data$Sick))<2 | length(unique(data$work.f.mean))<2) #if all instances are either TRUE of FALSE
{OR<-upper<-lower<-1
} else {
model <- with(data, glm(Sick~scale(work.f.mean), family = binomial()))    #Store odds ratios
if(model$converged==T){
OR <- exp(model$coefficients)[2] #position [1] is the intercept...
lower <- exp(confint(model))[2,1]
upper <- exp(confint(model))[2,2]} else {
OR<-upper<-lower<-1
}
}
return(data.frame(day=unique(data$day),OR,lower,upper))
}
#function to get the odds per simulation
getodds_all <- function(ddir){
#read data
daydata <- read.csv(file.path(ddir,"daydata.csv"))[,-c(1,2)]
load(file.path(ddir,"settings.Rdata"))
odds <- ldply(unique(daydata$days), function(day) getodds(subset(daydata, days==day)))
odds$rho.E <- rep(settings$rho.E, nrow(odds))
odds$eps.A <- rep(settings$eps.A, nrow(odds))
odds$eps.D <- rep(settings$eps.D, nrow(odds))
return(odds)
}
#combine the odds rations from all simulations
odds_all<-ldply(datadir, function(ddir) getodds_all(ddir))
odds_all$rho.E<-as.factor(odds_all$rho.E) # label = c(paste(expression(rho[R]*' = .3')),paste(expression(rho[R]*' = .6')),paste(expression(rho[R]*' = .9'))))
odds_all$eps.A<-as.factor(odds_all$eps.A)
odds_all$eps.D<-as.factor(odds_all$eps.D)
#truncate the values to show max 100, for visibility reasons
for (type in c('OR','lower','upper')){odds_all[[type]] <- sapply(odds_all[[type]], function(i) min(i,100))}
#plot odds ratio's
ggplot(odds_all, aes(y= OR, x = day, shape = eps.D)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width=.2) +
facet_grid(eps.A ~ rho.E, labeller = label_bquote(rows = rho['R'] == .(.9), cols = epsilon['A'] == .(30))) +
#facet_grid(eps.A ~ rho.E, labeller = label_bquote(rows = rho['R'] == .(rho.E,3,3), cols = epsilon['A'] == .(10))) +
geom_hline(yintercept = 1, linetype=2) +
#coord_flip() +
coord_trans(y="log10") +
#coord_cartesian(ylim=c(.01, 100)) + #limit the visible range
scale_y_continuous(breaks=c(1, 10, 100),minor_breaks=c(seq(1,10,1),seq(20,100,10))) + # Ticks
scale_x_continuous(breaks=odds_all$day) +
scale_shape_discrete(name=expression(epsilon['D'])) +
#labs(title = expression('Relative disease risk - split by value of '*epsilon['A']*' (horizontal) and '*rho['R']*' (vertical)'), x = "Day", y = "Relative disease risk") +
labs(x = "Day", y = "Relative disease risk") +
theme_minimal() + theme(legend.position="bottom")
ggsave('odds_no_ant.png', width = 12.5, height = 10, units = "cm")
# #assess assumptions
# dwt(odds_model) #Independence of errors (Durbin-Watson)
# densityplot(rstandard(odds_model)) #check for outliers
# hist(dfbeta(odds_model)) #influential cases
# densityplot(hatvalues(odds_model)) #influential cases
# plot(odds_model)
#
# #look at model
# summary(odds_model)
#
# #model fit by Chi2
# Chi_sq <- odds_model$null.deviance-odds_model$deviance
# chidf <- odds_model$df.null - odds_model$df.residual
# chisq.prob <- 1 - pchisq(Chi_sq, chidf)
# Chi_sq; chidf; chisq.prob
#
# #model fit by R2
# R2.hl<-Chi_sq/odds_model$null.deviance
# R.cs<-1-exp((odds_model$deviance-odds_model$null.deviance)/nrow(odds.data))
# R.n<-R.cs/(1-(exp(-(odds_model$null.deviance/nrow(odds.data)))))
# R2.hl; R.cs; R.n
}
ggsave('odds_no_ant.pdf', width = 12.5, height = 10, units = "cm")
# IF ELASTICITY CONSTANT, ALLOSTATIC LOAD THRESHOLD AND DISEASE THRESHOLD WERE VARIED BETWEEN SIMULATIONS - CREATE GRID GRAPH SHOWING RISK OF DISEASE FOR DIFFERENT FREQUENCIES OF WORK STRESSORS UNDER THE VARYING ARBITRARY PARAMETER CHOISES OF THE ELASTICITY CONSTANT, ALLOSTATIC LOAD THRESHOLD AND DISEASE THRESHOLD
if(length(datadir)>1 & sum(c('rho.E','eps.A','eps.D') %in% names(paramsets[[1]]))==3){
#function to get the odds per day in the simulation
getodds <- function(data){
if(length(unique(data$Sick))<2 | length(unique(data$work.f.mean))<2) #if all instances are either TRUE of FALSE
{OR<-upper<-lower<-1
} else {
model <- with(data, glm(Sick~scale(work.f.mean), family = binomial()))    #Store odds ratios
if(model$converged==T){
OR <- exp(model$coefficients)[2] #position [1] is the intercept...
lower <- exp(confint(model))[2,1]
upper <- exp(confint(model))[2,2]} else {
OR<-upper<-lower<-1
}
}
return(data.frame(day=unique(data$day),OR,lower,upper))
}
#function to get the odds per simulation
getodds_all <- function(ddir){
#read data
daydata <- read.csv(file.path(ddir,"daydata.csv"))[,-c(1,2)]
load(file.path(ddir,"settings.Rdata"))
odds <- ldply(unique(daydata$days), function(day) getodds(subset(daydata, days==day)))
odds$rho.E <- rep(settings$rho.E, nrow(odds))
odds$eps.A <- rep(settings$eps.A, nrow(odds))
odds$eps.D <- rep(settings$eps.D, nrow(odds))
return(odds)
}
#combine the odds rations from all simulations
odds_all<-ldply(datadir, function(ddir) getodds_all(ddir))
odds_all$rho.E<-as.factor(odds_all$rho.E) # label = c(paste(expression(rho[R]*' = .3')),paste(expression(rho[R]*' = .6')),paste(expression(rho[R]*' = .9'))))
odds_all$eps.A<-as.factor(odds_all$eps.A)
odds_all$eps.D<-as.factor(odds_all$eps.D)
#truncate the values to show max 100, for visibility reasons
for (type in c('OR','lower','upper')){odds_all[[type]] <- sapply(odds_all[[type]], function(i) min(i,100))}
#plot odds ratio's
ggplot(odds_all, aes(y= OR, x = day, shape = eps.D)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width=.2) +
facet_grid(eps.A ~ rho.E, labeller = label_bquote(rows = rho['R'] == .(.6), cols = epsilon['A'] == .(20))) +
#facet_grid(eps.A ~ rho.E, labeller = label_bquote(rows = rho['R'] == .(rho.E,3,3), cols = epsilon['A'] == .(10))) +
geom_hline(yintercept = 1, linetype=2) +
#coord_flip() +
coord_trans(y="log10") +
#coord_cartesian(ylim=c(.01, 100)) + #limit the visible range
scale_y_continuous(breaks=c(1, 10, 100),minor_breaks=c(seq(1,10,1),seq(20,100,10))) + # Ticks
scale_x_continuous(breaks=odds_all$day) +
scale_shape_discrete(name=expression(epsilon['D'])) +
#labs(title = expression('Relative disease risk - split by value of '*epsilon['A']*' (horizontal) and '*rho['R']*' (vertical)'), x = "Day", y = "Relative disease risk") +
labs(x = "Day", y = "Relative disease risk") +
theme_minimal() + theme(legend.position="bottom")
ggsave('odds_no_ant.png', width = 12.5, height = 10, units = "cm")
ggsave('odds_no_ant.pdf', width = 12.5, height = 10, units = "cm")
# #assess assumptions
# dwt(odds_model) #Independence of errors (Durbin-Watson)
# densityplot(rstandard(odds_model)) #check for outliers
# hist(dfbeta(odds_model)) #influential cases
# densityplot(hatvalues(odds_model)) #influential cases
# plot(odds_model)
#
# #look at model
# summary(odds_model)
#
# #model fit by Chi2
# Chi_sq <- odds_model$null.deviance-odds_model$deviance
# chidf <- odds_model$df.null - odds_model$df.residual
# chisq.prob <- 1 - pchisq(Chi_sq, chidf)
# Chi_sq; chidf; chisq.prob
#
# #model fit by R2
# R2.hl<-Chi_sq/odds_model$null.deviance
# R.cs<-1-exp((odds_model$deviance-odds_model$null.deviance)/nrow(odds.data))
# R.n<-R.cs/(1-(exp(-(odds_model$null.deviance/nrow(odds.data)))))
# R2.hl; R.cs; R.n
}
# IF ELASTICITY CONSTANT, ALLOSTATIC LOAD THRESHOLD AND DISEASE THRESHOLD WERE VARIED BETWEEN SIMULATIONS - CREATE GRID GRAPH SHOWING RISK OF DISEASE FOR DIFFERENT FREQUENCIES OF WORK STRESSORS UNDER THE VARYING ARBITRARY PARAMETER CHOISES OF THE ELASTICITY CONSTANT, ALLOSTATIC LOAD THRESHOLD AND DISEASE THRESHOLD
if(length(datadir)>1 & sum(c('rho.E','eps.A','eps.D') %in% names(paramsets[[1]]))==3){
#function to get the odds per day in the simulation
getodds <- function(data){
if(length(unique(data$Sick))<2 | length(unique(data$work.f.mean))<2) #if all instances are either TRUE of FALSE
{OR<-upper<-lower<-1
} else {
model <- with(data, glm(Sick~scale(work.f.mean), family = binomial()))    #Store odds ratios
if(model$converged==T){
OR <- exp(model$coefficients)[2] #position [1] is the intercept...
lower <- exp(confint(model))[2,1]
upper <- exp(confint(model))[2,2]} else {
OR<-upper<-lower<-1
}
}
return(data.frame(day=unique(data$day),OR,lower,upper))
}
#function to get the odds per simulation
getodds_all <- function(ddir){
#read data
daydata <- read.csv(file.path(ddir,"daydata.csv"))[,-c(1,2)]
load(file.path(ddir,"settings.Rdata"))
odds <- ldply(unique(daydata$days), function(day) getodds(subset(daydata, days==day)))
odds$rho.E <- rep(settings$rho.E, nrow(odds))
odds$eps.A <- rep(settings$eps.A, nrow(odds))
odds$eps.D <- rep(settings$eps.D, nrow(odds))
return(odds)
}
#combine the odds rations from all simulations
odds_all<-ldply(datadir, function(ddir) getodds_all(ddir))
odds_all$rho.E<-as.factor(odds_all$rho.E) # label = c(paste(expression(rho[R]*' = .3')),paste(expression(rho[R]*' = .6')),paste(expression(rho[R]*' = .9'))))
odds_all$eps.A<-as.factor(odds_all$eps.A)
odds_all$eps.D<-as.factor(odds_all$eps.D)
#truncate the values to show max 100, for visibility reasons
for (type in c('OR','lower','upper')){odds_all[[type]] <- sapply(odds_all[[type]], function(i) min(i,100))}
#plot odds ratio's
ggplot(odds_all, aes(y= OR, x = day, shape = eps.D)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width=.2) +
facet_grid(eps.A ~ rho.E, labeller = label_bquote(rows = rho['R'] == .(.3), cols = epsilon['A'] == .(10))) +
#facet_grid(eps.A ~ rho.E, labeller = label_bquote(rows = rho['R'] == .(rho.E,3,3), cols = epsilon['A'] == .(10))) +
geom_hline(yintercept = 1, linetype=2) +
#coord_flip() +
coord_trans(y="log10") +
#coord_cartesian(ylim=c(.01, 100)) + #limit the visible range
scale_y_continuous(breaks=c(1, 10, 100),minor_breaks=c(seq(1,10,1),seq(20,100,10))) + # Ticks
scale_x_continuous(breaks=odds_all$day) +
scale_shape_discrete(name=expression(epsilon['D'])) +
#labs(title = expression('Relative disease risk - split by value of '*epsilon['A']*' (horizontal) and '*rho['R']*' (vertical)'), x = "Day", y = "Relative disease risk") +
labs(x = "Day", y = "Relative disease risk") +
theme_minimal() + theme(legend.position="bottom")
ggsave('odds_no_ant.png', width = 12.5, height = 10, units = "cm")
ggsave('odds_no_ant.pdf', width = 12.5, height = 10, units = "cm")
# #assess assumptions
# dwt(odds_model) #Independence of errors (Durbin-Watson)
# densityplot(rstandard(odds_model)) #check for outliers
# hist(dfbeta(odds_model)) #influential cases
# densityplot(hatvalues(odds_model)) #influential cases
# plot(odds_model)
#
# #look at model
# summary(odds_model)
#
# #model fit by Chi2
# Chi_sq <- odds_model$null.deviance-odds_model$deviance
# chidf <- odds_model$df.null - odds_model$df.residual
# chisq.prob <- 1 - pchisq(Chi_sq, chidf)
# Chi_sq; chidf; chisq.prob
#
# #model fit by R2
# R2.hl<-Chi_sq/odds_model$null.deviance
# R.cs<-1-exp((odds_model$deviance-odds_model$null.deviance)/nrow(odds.data))
# R.n<-R.cs/(1-(exp(-(odds_model$null.deviance/nrow(odds.data)))))
# R2.hl; R.cs; R.n
}
### this script changes the layout and names of an old settings version to the new style
winDir <- "C:/Users/b8058356/OneDrive - Newcastle University/Courses and learning/BS28A - Major project/simulations/simoutput/samples/"
macDir <- "/Users/remcobenthemdegrave/OneDrive - Newcastle University/Courses and learning/BS28A - Major project/simulations"
if (file.exists(winDir)){setwd(winDir)};
if (file.exists(macDir)){setwd(macDir)};
#get the paths to the settings files to change
choicedir<-tk_choose.dir(getwd(), "Show folder with settings file(s) to change")
#list the file paths to the different simulations in the folder (using a bit of a complex way to get there)
subdirlist <- unlist(lapply(list.dirs(choicedir), function(i)
unlist(strsplit(i,"/"))[length(unlist(strsplit(i,"/")))])) #for each folder path...
#...abstract the name of the last folder in the folderpath
subdirlist <- subdirlist[subdirlist %in% dir(choicedir)] #keep only those that are a direct subpath of...
#...the choicedir
subdirlist <- subdirlist[grepl('sim', subdirlist)] #test for each subdir if it contains 'sim' ...
#...and keep only those
datadir <- file.path(choicedir,subdirlist)
if(length(datadir)==0){datadir<-choicedir} #if the choicefolder already contains the simulation data, ...
#...then keep this folder
changedaydata <- function(ddir){
daydata <- read.csv(file.path(ddir,"daydata.csv"))[,-c(1)]
names(daydata)[4] <- 'work.f.mean'
write.csv(daydata, file.path(ddir,"daydata.csv"))
}
#get settings for each simulation
lapply(datadir, function(filepath) changedaydata(filepath))
rm(datadir)
#### SET DATA PATH (ONLY RELEVANT IN THE SCRIPT IS RAN MANUALLY) ####
if(!exists("datadir")){
choicedir<-tk_choose.dir(getwd(), "Show folder with data to publish")
#list the file paths to the different simulations in the folder (using a bit of a complex way to get there)
subdirlist <- unlist(lapply(list.dirs(choicedir), function(i)
unlist(strsplit(i,"/"))[length(unlist(strsplit(i,"/")))])) #for each folder path...
#...abstract the name of the last folder in the folderpath
subdirlist <- subdirlist[subdirlist %in% dir(choicedir)] #keep only those that are a direct subpath of...
#...the choicedir
subdirlist <- subdirlist[grepl('sim', subdirlist)] #test for each subdir if it contains 'sim' ...
#...and keep only those
datadir <- file.path(choicedir,subdirlist)
if(length(datadir)==0){datadir<-choicedir} #if the choicefolder already contains the simulation data, ...
#...then keep this folder
##define paramsets (if the script is not rendered from the simulation script, 'paramsets' is determined
#from the data)
#get settings for each simulation
set <- function(ddir){load(file.path(ddir,"settings.Rdata"));return(settings)}
settingsset <- lapply(datadir, function(ddir) set(ddir))
#test which settings are different between 2 simulations
uparam<-unique(unlist(lapply(seq_along(settingsset), function(i)
which(lapply(names(settingsset[[1]]), function(name)
unique(sort(settingsset[[1]][[name]]==settingsset[[i]][[name]]),decreasing = F)[1])==F)
)))
#create the merged paramsets
if(length(uparam)==0){paramsets<-NULL}else{paramsets=lapply(settingsset, function(sett) sett[uparam])}
}
if(!exists("paramsets")){paramsets<-NULL}
# IF ELASTICITY CONSTANT, ALLOSTATIC LOAD THRESHOLD AND DISEASE THRESHOLD WERE VARIED BETWEEN SIMULATIONS - CREATE GRID GRAPH SHOWING RISK OF DISEASE FOR DIFFERENT FREQUENCIES OF WORK STRESSORS UNDER THE VARYING ARBITRARY PARAMETER CHOISES OF THE ELASTICITY CONSTANT, ALLOSTATIC LOAD THRESHOLD AND DISEASE THRESHOLD
if(length(datadir)>1 & sum(c('rho.E','eps.A','eps.D') %in% names(paramsets[[1]]))==3){
#function to get the odds per day in the simulation
getodds <- function(data){
if(length(unique(data$Sick))<2 | length(unique(data$work.f.mean))<2) #if all instances are either TRUE of FALSE
{OR<-upper<-lower<-1
} else {
model <- with(data, glm(Sick~scale(work.f.mean), family = binomial()))    #Store odds ratios
if(model$converged==T){
OR <- exp(model$coefficients)[2] #position [1] is the intercept...
lower <- exp(confint(model))[2,1]
upper <- exp(confint(model))[2,2]} else {
OR<-upper<-lower<-1
}
}
return(data.frame(day=unique(data$day),OR,lower,upper))
}
#function to get the odds per simulation
getodds_all <- function(ddir){
#read data
daydata <- read.csv(file.path(ddir,"daydata.csv"))[,-c(1,2)]
load(file.path(ddir,"settings.Rdata"))
odds <- ldply(unique(daydata$days), function(day) getodds(subset(daydata, days==day)))
odds$rho.E <- rep(settings$rho.E, nrow(odds))
odds$eps.A <- rep(settings$eps.A, nrow(odds))
odds$eps.D <- rep(settings$eps.D, nrow(odds))
return(odds)
}
#combine the odds rations from all simulations
odds_all<-ldply(datadir, function(ddir) getodds_all(ddir))
odds_all$rho.E<-as.factor(odds_all$rho.E) # label = c(paste(expression(rho[R]*' = .3')),paste(expression(rho[R]*' = .6')),paste(expression(rho[R]*' = .9'))))
odds_all$eps.A<-as.factor(odds_all$eps.A)
odds_all$eps.D<-as.factor(odds_all$eps.D)
#truncate the values to show max 100, for visibility reasons
for (type in c('OR','lower','upper')){odds_all[[type]] <- sapply(odds_all[[type]], function(i) min(i,100))}
#plot odds ratio's
ggplot(odds_all, aes(y= OR, x = day, shape = eps.D)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width=.2) +
facet_grid(eps.A ~ rho.E, labeller = label_bquote(rows = rho['R'] == .(.3), cols = epsilon['A'] == .(10))) +
#facet_grid(eps.A ~ rho.E, labeller = label_bquote(rows = rho['R'] == .(rho.E,3,3), cols = epsilon['A'] == .(10))) +
geom_hline(yintercept = 1, linetype=2) +
#coord_flip() +
coord_trans(y="log10") +
#coord_cartesian(ylim=c(.01, 100)) + #limit the visible range
scale_y_continuous(breaks=c(1, 10, 100),minor_breaks=c(seq(1,10,1),seq(20,100,10))) + # Ticks
scale_x_continuous(breaks=odds_all$day) +
scale_shape_discrete(name=expression(epsilon['D'])) +
#labs(title = expression('Relative disease risk - split by value of '*epsilon['A']*' (horizontal) and '*rho['R']*' (vertical)'), x = "Day", y = "Relative disease risk") +
labs(x = "Day", y = "Relative disease risk") +
theme_minimal() + theme(legend.position="bottom")
ggsave('odds_with_ant.png', width = 12.5, height = 10, units = "cm")
ggsave('odds_with_ant.pdf', width = 12.5, height = 10, units = "cm")
# #assess assumptions
# dwt(odds_model) #Independence of errors (Durbin-Watson)
# densityplot(rstandard(odds_model)) #check for outliers
# hist(dfbeta(odds_model)) #influential cases
# densityplot(hatvalues(odds_model)) #influential cases
# plot(odds_model)
#
# #look at model
# summary(odds_model)
#
# #model fit by Chi2
# Chi_sq <- odds_model$null.deviance-odds_model$deviance
# chidf <- odds_model$df.null - odds_model$df.residual
# chisq.prob <- 1 - pchisq(Chi_sq, chidf)
# Chi_sq; chidf; chisq.prob
#
# #model fit by R2
# R2.hl<-Chi_sq/odds_model$null.deviance
# R.cs<-1-exp((odds_model$deviance-odds_model$null.deviance)/nrow(odds.data))
# R.n<-R.cs/(1-(exp(-(odds_model$null.deviance/nrow(odds.data)))))
# R2.hl; R.cs; R.n
}
# IF ELASTICITY CONSTANT, ALLOSTATIC LOAD THRESHOLD AND DISEASE THRESHOLD WERE VARIED BETWEEN SIMULATIONS - CREATE GRID GRAPH SHOWING RISK OF DISEASE FOR DIFFERENT FREQUENCIES OF WORK STRESSORS UNDER THE VARYING ARBITRARY PARAMETER CHOISES OF THE ELASTICITY CONSTANT, ALLOSTATIC LOAD THRESHOLD AND DISEASE THRESHOLD
if(length(datadir)>1 & sum(c('rho.E','eps.A','eps.D') %in% names(paramsets[[1]]))==3){
#function to get the odds per day in the simulation
getodds <- function(data){
if(length(unique(data$Sick))<2 | length(unique(data$work.f.mean))<2) #if all instances are either TRUE of FALSE
{OR<-upper<-lower<-1
} else {
model <- with(data, glm(Sick~scale(work.f.mean), family = binomial()))    #Store odds ratios
if(model$converged==T){
OR <- exp(model$coefficients)[2] #position [1] is the intercept...
lower <- exp(confint(model))[2,1]
upper <- exp(confint(model))[2,2]} else {
OR<-upper<-lower<-1
}
}
return(data.frame(day=unique(data$day),OR,lower,upper))
}
#function to get the odds per simulation
getodds_all <- function(ddir){
#read data
daydata <- read.csv(file.path(ddir,"daydata.csv"))[,-c(1,2)]
load(file.path(ddir,"settings.Rdata"))
odds <- ldply(unique(daydata$days), function(day) getodds(subset(daydata, days==day)))
odds$rho.E <- rep(settings$rho.E, nrow(odds))
odds$eps.A <- rep(settings$eps.A, nrow(odds))
odds$eps.D <- rep(settings$eps.D, nrow(odds))
return(odds)
}
#combine the odds rations from all simulations
odds_all<-ldply(datadir, function(ddir) getodds_all(ddir))
odds_all$rho.E<-as.factor(odds_all$rho.E) # label = c(paste(expression(rho[R]*' = .3')),paste(expression(rho[R]*' = .6')),paste(expression(rho[R]*' = .9'))))
odds_all$eps.A<-as.factor(odds_all$eps.A)
odds_all$eps.D<-as.factor(odds_all$eps.D)
#truncate the values to show max 100, for visibility reasons
for (type in c('OR','lower','upper')){odds_all[[type]] <- sapply(odds_all[[type]], function(i) min(i,100))}
#plot odds ratio's
ggplot(odds_all, aes(y= OR, x = day, shape = eps.D)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width=.2) +
facet_grid(eps.A ~ rho.E, labeller = label_bquote(rows = rho['R'] == .(.6), cols = epsilon['A'] == .(20))) +
#facet_grid(eps.A ~ rho.E, labeller = label_bquote(rows = rho['R'] == .(rho.E,3,3), cols = epsilon['A'] == .(10))) +
geom_hline(yintercept = 1, linetype=2) +
#coord_flip() +
coord_trans(y="log10") +
#coord_cartesian(ylim=c(.01, 100)) + #limit the visible range
scale_y_continuous(breaks=c(1, 10, 100),minor_breaks=c(seq(1,10,1),seq(20,100,10))) + # Ticks
scale_x_continuous(breaks=odds_all$day) +
scale_shape_discrete(name=expression(epsilon['D'])) +
#labs(title = expression('Relative disease risk - split by value of '*epsilon['A']*' (horizontal) and '*rho['R']*' (vertical)'), x = "Day", y = "Relative disease risk") +
labs(x = "Day", y = "Relative disease risk") +
theme_minimal() + theme(legend.position="bottom")
ggsave('odds_with_ant.png', width = 12.5, height = 10, units = "cm")
ggsave('odds_with_ant.pdf', width = 12.5, height = 10, units = "cm")
# #assess assumptions
# dwt(odds_model) #Independence of errors (Durbin-Watson)
# densityplot(rstandard(odds_model)) #check for outliers
# hist(dfbeta(odds_model)) #influential cases
# densityplot(hatvalues(odds_model)) #influential cases
# plot(odds_model)
#
# #look at model
# summary(odds_model)
#
# #model fit by Chi2
# Chi_sq <- odds_model$null.deviance-odds_model$deviance
# chidf <- odds_model$df.null - odds_model$df.residual
# chisq.prob <- 1 - pchisq(Chi_sq, chidf)
# Chi_sq; chidf; chisq.prob
#
# #model fit by R2
# R2.hl<-Chi_sq/odds_model$null.deviance
# R.cs<-1-exp((odds_model$deviance-odds_model$null.deviance)/nrow(odds.data))
# R.n<-R.cs/(1-(exp(-(odds_model$null.deviance/nrow(odds.data)))))
# R2.hl; R.cs; R.n
}
# IF ELASTICITY CONSTANT, ALLOSTATIC LOAD THRESHOLD AND DISEASE THRESHOLD WERE VARIED BETWEEN SIMULATIONS - CREATE GRID GRAPH SHOWING RISK OF DISEASE FOR DIFFERENT FREQUENCIES OF WORK STRESSORS UNDER THE VARYING ARBITRARY PARAMETER CHOISES OF THE ELASTICITY CONSTANT, ALLOSTATIC LOAD THRESHOLD AND DISEASE THRESHOLD
if(length(datadir)>1 & sum(c('rho.E','eps.A','eps.D') %in% names(paramsets[[1]]))==3){
#function to get the odds per day in the simulation
getodds <- function(data){
if(length(unique(data$Sick))<2 | length(unique(data$work.f.mean))<2) #if all instances are either TRUE of FALSE
{OR<-upper<-lower<-1
} else {
model <- with(data, glm(Sick~scale(work.f.mean), family = binomial()))    #Store odds ratios
if(model$converged==T){
OR <- exp(model$coefficients)[2] #position [1] is the intercept...
lower <- exp(confint(model))[2,1]
upper <- exp(confint(model))[2,2]} else {
OR<-upper<-lower<-1
}
}
return(data.frame(day=unique(data$day),OR,lower,upper))
}
#function to get the odds per simulation
getodds_all <- function(ddir){
#read data
daydata <- read.csv(file.path(ddir,"daydata.csv"))[,-c(1,2)]
load(file.path(ddir,"settings.Rdata"))
odds <- ldply(unique(daydata$days), function(day) getodds(subset(daydata, days==day)))
odds$rho.E <- rep(settings$rho.E, nrow(odds))
odds$eps.A <- rep(settings$eps.A, nrow(odds))
odds$eps.D <- rep(settings$eps.D, nrow(odds))
return(odds)
}
#combine the odds rations from all simulations
odds_all<-ldply(datadir, function(ddir) getodds_all(ddir))
odds_all$rho.E<-as.factor(odds_all$rho.E) # label = c(paste(expression(rho[R]*' = .3')),paste(expression(rho[R]*' = .6')),paste(expression(rho[R]*' = .9'))))
odds_all$eps.A<-as.factor(odds_all$eps.A)
odds_all$eps.D<-as.factor(odds_all$eps.D)
#truncate the values to show max 100, for visibility reasons
for (type in c('OR','lower','upper')){odds_all[[type]] <- sapply(odds_all[[type]], function(i) min(i,100))}
#plot odds ratio's
ggplot(odds_all, aes(y= OR, x = day, shape = eps.D)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width=.2) +
facet_grid(eps.A ~ rho.E, labeller = label_bquote(rows = rho['R'] == .(.9), cols = epsilon['A'] == .(30))) +
#facet_grid(eps.A ~ rho.E, labeller = label_bquote(rows = rho['R'] == .(rho.E,3,3), cols = epsilon['A'] == .(10))) +
geom_hline(yintercept = 1, linetype=2) +
#coord_flip() +
coord_trans(y="log10") +
#coord_cartesian(ylim=c(.01, 100)) + #limit the visible range
scale_y_continuous(breaks=c(1, 10, 100),minor_breaks=c(seq(1,10,1),seq(20,100,10))) + # Ticks
scale_x_continuous(breaks=odds_all$day) +
scale_shape_discrete(name=expression(epsilon['D'])) +
#labs(title = expression('Relative disease risk - split by value of '*epsilon['A']*' (horizontal) and '*rho['R']*' (vertical)'), x = "Day", y = "Relative disease risk") +
labs(x = "Day", y = "Relative disease risk") +
theme_minimal() + theme(legend.position="bottom")
ggsave('odds_with_ant.png', width = 12.5, height = 10, units = "cm")
ggsave('odds_with_ant.pdf', width = 12.5, height = 10, units = "cm")
# #assess assumptions
# dwt(odds_model) #Independence of errors (Durbin-Watson)
# densityplot(rstandard(odds_model)) #check for outliers
# hist(dfbeta(odds_model)) #influential cases
# densityplot(hatvalues(odds_model)) #influential cases
# plot(odds_model)
#
# #look at model
# summary(odds_model)
#
# #model fit by Chi2
# Chi_sq <- odds_model$null.deviance-odds_model$deviance
# chidf <- odds_model$df.null - odds_model$df.residual
# chisq.prob <- 1 - pchisq(Chi_sq, chidf)
# Chi_sq; chidf; chisq.prob
#
# #model fit by R2
# R2.hl<-Chi_sq/odds_model$null.deviance
# R.cs<-1-exp((odds_model$deviance-odds_model$null.deviance)/nrow(odds.data))
# R.n<-R.cs/(1-(exp(-(odds_model$null.deviance/nrow(odds.data)))))
# R2.hl; R.cs; R.n
}
